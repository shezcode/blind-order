name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache backend dependencies
        id: cache-backend
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-backend-${{ hashFiles('backend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-backend-

      - name: Install backend dependencies
        if: steps.cache-backend.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: npm install

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Run backend tests
        working-directory: ./backend
        run: |
          npm run test:unit
          npm run test:integration

      - name: Generate coverage report
        if: matrix.node-version == '18.x'
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload coverage reports
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          fail_ci_if_error: false
          verbose: true

  frontend-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Cache frontend dependencies
        id: cache-frontend
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-frontend-

      - name: Install frontend dependencies
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: npm install

      - name: Type check frontend
        working-directory: ./frontend
        run: npm run type-check || true

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint || true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-checks]
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          docker build -t blindorder-backend:test ./backend

      - name: Build frontend Docker image
        run: |
          docker build -t blindorder-frontend:test ./frontend

      - name: Test Docker images
        run: |
          docker run --rm blindorder-backend:test echo "Backend image OK"
          docker run --rm blindorder-frontend:test echo "Frontend image OK"
